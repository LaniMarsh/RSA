from Crypto.Util.number import getPrime
from typing import List
from rsa import *

# Alice sends public key (n, e)

((n, e), (n, d)) = getRSAKeyPair()

print("Alice sends public key to Bob")
print("n:", n)
print("e:", e)
print()

print("Bob gets s and encrypts it to c")
# get a random int less than n
s = random.randint(0, n)
print("s:", s)
print()

# encrypt s and get c
c = RSAEncrypt(s, (n, e))

print("Bob sends c to Alice")
print("c:", c)
print()

# this is where we manipulate c to set a shared key of cPrime between Alice and Mallory

print("Mallory intercepts c and chooses cPrime to send")
cPrime = n
c = cPrime

print("Mallory sends cPrime to Alice")
print("cPrime:", cPrime)
print()


# s_alice should be equal to s since we haven't tampered
s_alice = pow(c, d, n)
print("Alice decrypts c to get s:", s_alice)

# get 16 byte key
encoded_key = str(s_alice).encode()
hash_object = SHA256.new(data=encoded_key)
hashed_array = bytearray(hash_object.digest())
derived_key = bytes(hashed_array[:16]) # truncate

print("Alice uses s to generate a key:", derived_key)
print()

# send message using CBC encryption
m = "Hi Bob!"
print("Alice encrypts message:", m)
c0 = encrypt(m.encode(), derived_key)
print("Alice sends encrypted message (c0) to Bob:", c0)
print()


# message decryption by Mallory

print("Mallory uses cPrime to generate a decryption key")
encoded_cPrime = str(0).encode()
cPrimeHash = SHA256.new(data=encoded_cPrime)
cPrimeArr = bytearray(cPrimeHash.digest())
cPrime_key = bytes(cPrimeArr[:16]) # truncate

print("cPrime_Key used to decrypt c0:", cPrime_key)
print()

c0_decrypted = decrypt(c0, cPrime_key).decode()
print("Mallory decrypts c0 with cPrime:", c0_decrypted)
